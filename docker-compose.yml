services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecommerce
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8010:8010"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      REDIS_ADDR: redis:6379
      REDIS_PASS: ""
      REDIS_DB: "0"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8010/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8020:8020"
    depends_on:
      postgres:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      INVENTORY_SERVICE_URL: http://inventory-service:8010
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8020/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    depends_on:
      inventory-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    environment:
      INVENTORY_SERVICE_URL: http://inventory-service:8010
      ORDER_SERVICE_URL: http://order-service:8020
    
  statistics-service:
    build:
      context: ./statistics-service
    container_name: statistics-service
    ports:
      - "8004:8004"
    depends_on:
      - postgres
      - nats

  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "4222:4222"
    environment:
      NATS_SERVER: "1"

volumes:
  pgdata:
  redis_data: